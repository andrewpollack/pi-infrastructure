# Pi Infrastructure Workspace Rules

## Project Structure
- containers/ - Contains all container definitions
  - garage-go/ - Garage door monitoring system
    - Raspberry Pi 2 W with magnetic door sensor
    - Prometheus metrics exporter
  - meals-go/ - Meal planning and management backend
    - GoLang backend using Gin framework
    - Database synchronization cronjob
  - meals-frontend/ - Meal planning web interface
    - Svelte-based frontend
    - Calendar and meal management views
  - ops/ - Operations and deployment scripts for containers
- ansible/ - Ansible playbooks and roles for infrastructure management
- terraform/ - Terraform configurations for infrastructure provisioning

## Key Services
- Meals Services
  - Web interface for monthly meal planning
  - Automated grocery list generation
  - Email notification system
- Garage Monitoring
  - Door state tracking
  - Prometheus metrics
  - Grafana dashboard integration

## Technologies
- Containerization: Docker, k3s
- Backend: GoLang, Gin
- Frontend: Svelte
- Infrastructure: Ansible, Terraform
- Monitoring: Prometheus, Grafana
- Cloud Services: AWS S3, Amazon SES

## Deployment
- Kubernetes (k3s) on Raspberry Pi cluster
- NodePort services
- Tailscale for secure access
  
## Code Organization
- Maintain clear separation of concerns between containers
- Use meaningful and descriptive names for packages, functions, and variables
- Keep each container focused on a specific functionality
- Organize code into logical, modular structures
- Minimize dependencies between different containers

## Go Coding Standards
- Follow Go best practices and idiomatic Go programming
- Use `gofmt` for consistent code formatting
- Use `golangci-lint run` to run static analysis 
- Write comprehensive unit tests for each package
- Maintain clear and concise documentation comments
- Use `context` for managing timeouts and cancellations
- Prefer composition over inheritance
- Handle errors explicitly and avoid ignoring them
- Use interfaces to define behavior contracts

## Svelte Coding Standards
- Follow Svelte best practices and idiomatic Svelte programming
- Use `prettier` for consistent code formatting
- Use `svelte-check` to run static analysis
- Write comprehensive unit tests for each component
- Maintain clear and concise documentation comments

## Deployment and Containerization
- Ensure each container has a well-defined Dockerfile
- Use multi-stage builds to minimize container size
- Include `.dockerignore` to exclude unnecessary files
- Use semantic versioning for container images
- Optimize container build times
- Minimize image layers
- Use lightweight base images (e.g., Alpine Linux)

## Logging and Monitoring
- Use structured logging
- Include relevant context in log messages
- Use log levels appropriately (DEBUG, INFO, WARN, ERROR)
- Do not log sensitive information
- Implement metrics and tracing
- Use centralized logging solutions
- Set up alerts for critical errors and performance issues

## Dependency Management
- Use Go modules for dependency management
- Pin dependency versions
- Regularly update and audit dependencies
- Minimize external dependencies
- Prefer standard library solutions when possible
- Use `go mod tidy` to clean up unused dependencies
- Consider the performance and security implications of each dependency
